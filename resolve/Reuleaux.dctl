// Created by:
// https://github.com/hotgluebanjo
// https://github.com/calvinsilly

DEFINE_UI_PARAMS(DIRECTION, Direction, DCTLUI_COMBO_BOX, 0, {Forward, Inverse}, {RGB to Reuleaux, Reuleaux to RGB})

__CONSTANT__ float PI_LOCAL = 3.141592653589f;

// This is 100% going to cause complaints.
#define NORM_MULTS make_float3(2.0f * PI_LOCAL, _sqrtf(2.0f), 1.0f)

__DEVICE__ float3 rgb_to_reuleaux(float3 rgb) {
    float3 rot = {
        _sqrtf(2.0f)/6.0f * (2.0f*rgb.x - rgb.y - rgb.z),
        (rgb.y - rgb.z) / _sqrtf(6.0f),
        (rgb.x + rgb.y + rgb.z) / 3.0f
    };

    float3 reuleaux = {
        PI_LOCAL - _atan2f(rot.y, -rot.x),
        rot.z == 0.0f ? 0.0f : _hypotf(rot.x, rot.y) / rot.z,
        _fmaxf(rgb.x, _fmaxf(rgb.y, rgb.z))
    };

    return reuleaux / NORM_MULTS;
}

__DEVICE__ float3 reuleaux_to_rgb(float3 reuleaux) {
    reuleaux *= NORM_MULTS;

    float m = NORM_MULTS.y * _fmaxf(_cosf(reuleaux.x), _fmaxf(_cosf(reuleaux.x + NORM_MULTS.x/3.0f), _cosf_(reuleaux.x - NORM_MULTS.x/3.0f))) + 1/reuleaux.y;

    float3 ocs = {
        reuleaux.z * _cosf(reuleaux.x) / m,
        reuleaux.z * _sinf(reuleaux.x) / m,
        reuleaux.z
    };

    float3 rgb;
    bool case_1 = ocs.x <= -ocs.y/_sqrtf(3.0f) && ocs.y <= 0.0f;
    bool case_2 = ocs.x < ocs.y/_sqrtf(3.0f);

    if (case_1) {
        rgb.x = 3.0f/_sqrtf(2.0f)*ocs.x + _sqrtf(3.0f/2.0f)*ocs.y + ocs.z;
        rgb.y = _sqrtf(6.0f)*ocs.y + ocs.z;
        rgb.z = ocs.z;
    } else if (case_2) {
        rgb.x = 3.0f/_sqrtf(2.0f)*ocs.x - _sqrtf(3.0f/2.0f)*ocs.y + ocs.z;
        rgb.y = ocs.z;
        rgb.z = -_sqrtf(6.0f)*ocs.y + ocs.z;
    } else {
        rgb.x = ocs.z;
        rgb.y = -3.0f/_sqrtf(2.0f)*ocs.x + _sqrtf(3.0f/2.0f)*ocs.y + ocs.z;
        rgb.z = -3.0f/_sqrtf(2.0f)*ocs.x - _sqrtf(3.0f/2.0f)*ocs.y + ocs.z;
    }

    return rgb;
}

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B) {
    float3 input = make_float3(p_R, p_G, p_B);
    float3 res;

    switch (DIRECTION) {
    case Forward:
        res = rgb_to_reuleaux(input);
        break;
    case Inverse:
        res = reuleaux_to_rgb(input);
    }

    return res;
}
